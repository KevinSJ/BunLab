@page "/about"

@using System.Runtime.InteropServices
@using System.Reflection
@using BunLab.Shared.Models.Informations

@inject HttpClient Http

<div>
    <h1 class="display-4">About</h1>
    <p class="lead">
        <a href="https://bun.plus" class="btn btn-sm btn-outline-primary">
            <ion-icon name="heart-outline"></ion-icon> by huhubun
        </a>
        <a href="https://github.com/huhubun/BunLab" class="btn btn-sm btn-outline-dark">
            <ion-icon name="logo-github"></ion-icon> GitHub
        </a>
    </p>
    <p>
        <a href="https://lab.bun.plus" class="text-dark">Bun Lab</a> 由 <a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor" class="text-dark">ASP.NET Core Blazor WebAssembly</a> 技术开发，旨在体验和尝试各种新技术~
    </p>
    <hr />

    <p>
        <b>@clientAssemblyName.Name</b>
        <span class="text-monospace">@(clientAssemblyName.Version)</span>
        <br />


        @if (serverInformation != null)
        {
            <b>@serverInformation.Name</b>
            <span class="text-monospace">@(serverInformation.Version) (@serverInformation.RuntimeFramework @@ @(serverInformation.OS))</span>
        }
        else
        {
            <div class="spinner-grow text-dark" role="status"></div>
            <span>Loading server-side information ...</span>
        }
    </p>

    @{#if DEBUG}
    <LabList Title="Runtime Information" SmallTitle="Provides information about the .NET runtime installation" List="runtimeInformationList" />
    <LabList Title="Runtime Environment" SmallTitle="Provides information about the common language runtime environment" List="runtimeEnvironmentList" />
    @{#endif}

</div>

@code {
    private List<LabListItem> runtimeInformationList = new List<LabListItem>();
    private List<LabListItem> runtimeEnvironmentList = new List<LabListItem>();
    private AssemblyName clientAssemblyName = Assembly.GetExecutingAssembly().GetName();
    private ServerInformationModel serverInformation = null;

    private void GetRuntimeInformationList()
    {
        runtimeInformationList.AddRange(typeof(RuntimeInformation).GetProperties().Select(p => new LabListItem
        {
            Name = p.Name,
            Value = p.GetValue(null)?.ToString()
        })
        .OrderBy(p => p.Name));
    }

    private void GetRuntimeEnvironmentList()
    {
        runtimeEnvironmentList.AddRange(typeof(RuntimeEnvironment).GetProperties().Select(p => new LabListItem
        {
            Name = p.Name,
            Value = p.GetValue(null)?.ToString()
        }));

        runtimeEnvironmentList.AddRange(typeof(RuntimeEnvironment).GetMethods()
            .Where(m => m.IsStatic)
            .Where(m => !m.IsSpecialName)                   // 过滤掉属性
            .Where(m => m.GetParameters().Length == 0)
            .Select(p => new LabListItem
            {
                Name = p.Name.StartsWith("get", StringComparison.InvariantCultureIgnoreCase) ? p.Name.Remove(0, 3) : p.Name,
                Value = p.Invoke(null, null)?.ToString()
            }));

        runtimeEnvironmentList = runtimeEnvironmentList.OrderBy(i => i.Name).ToList();
    }

    protected override void OnInitialized()
    {
        GetRuntimeInformationList();
        GetRuntimeEnvironmentList();
    }

    protected override async Task OnInitializedAsync()
    {
        serverInformation = await Http.GetFromJsonAsync<ServerInformationModel>("api/informations");
    }

}
